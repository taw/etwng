#!/usr/bin/env ruby

ruby = RUBY_PLATFORM == 'java' ? "jruby" : "ruby"

def platform # should probably use a library to detect os
  if RUBY_PLATFORM == 'java'
    require "java"
    case java.lang.System.getProperty("os.name")
    when /\bmac/i
      :mac
    when /\bwin/i
      :windows
    else
      :other
    end
  else
    case RUBY_PLATFORM
    when /\bdarwin/i
      :mac
    when /\bwin/i
      :windows
    else
     :other
    end
  end
end

def lzma
  return ENV["LZMA_DECOMPRESS"] if ENV["LZMA_DECOMPRESS"]
  return ENV["LZMA"] if ENV["LZMA"]
  case platform
  when :windows
    "./lzma"
  when :mac
    "./lzma.mac"
  else
    "lzma"
  end
end

quiet = nil
if ARGV[0] == "--quiet" or ARGV[0] == "--verbose"
  quiet = ARGV.shift
end

unless ARGV.size == 2
  STDERR.puts <<EOF
Usage:
  #{$0} input.esf output_dir
To hide progress bar:
  #{$0} --quiet input.esf output_dir
Environment variable LZMA or LZMA_DECOMPRESS may be used to point to specific executables
EOF
  exit 1
end

in_file = ARGV[0]
out_dir = ARGV[1]
if File.exist?(out_dir)
  STDERR.puts "#{out_dir} already exists"
  exit 1
end

system *[ruby, "./esf2xml", quiet, in_file, out_dir].compact

if File.exist?("#{out_dir}/compressed_data.esf.xz")
  case platform
  when :windows
    unless system lzma, "d", "#{out_dir}/compressed_data.esf.xz", "#{out_dir}/compressed_data.esf"
      abort("Error running lzma")
    end
  when :mac
    unless system lzma, "-dk", "-S", ".xz", "#{out_dir}/compressed_data.esf.xz"
      abort("Error running lzma")
    end
  else
    unless system lzma, "-dk", "#{out_dir}/compressed_data.esf.xz"
      abort("Error running lzma")
    end
  end
end

if File.exist?("#{out_dir}/compressed_data.esf")
  system *[ruby, "./esf2xml", quiet, "#{out_dir}/compressed_data.esf", "#{out_dir}/compressed_data"].compact
end
