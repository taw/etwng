#!/usr/bin/env ruby

require "pathname"
require_relative "magic_xml"

class ModelsNavalDbTable
  def initialize
    @data = "".b
    @mode = nil
  end

  def put(s)
    @data << s.b
  end

  def put_u4(i)
    @data << [i.to_i].pack("V")
  end

  def put_u2(i)
    @data << [i.to_i].pack("v")
  end

  def put_u1(i)
    @data << [i.to_i].pack("C")
  end

  def put_flt(v)
    @data << [v.to_f].pack("f")
  end

  def put_string(s)
    chars = s.unpack("U*")
    put_u2 chars.size
    put chars.pack("v*")
  end

  def put_ascii(s)
    put_u2(s.size)
    put(s)
  end

  def put_ary(type, elems)
    put_u4 elems.size
    elems.each do |elem|
      send(:"put_#{type}", elem)
    end
  end

  def put_db_header(xmldir)
    if xmldir.guid
      put "\xFD\xFE\xFC\xFF"
      put_string xmldir.guid
    end
    if xmldir.version == 1
      put "\x01".b
    else
      put "\xFC\xFD\xFE\xFF"
      put_u1(xmldir.version-1)
      put "\x00\x00\x00\x01"
    end
  end

  def set_mode(xmldir)
    case [xmldir.version, xmldir.empire]
    when [1, true]
      @mode = :etw
    when [1, false]
      @mode = :ntw
    when [7, false]
      @mode = :s2tw
    when [12, false]
      @mode = :r2tw
    else
      raise "Unknown mode (version=#{xmldir.version}, empire=#{xmldir.empire})"
    end
  end

  def put_vertex(vertex)
    put_flt vertex[:x]
    put_flt vertex[:y]
    put_flt vertex[:z]
  end

  def put_navalcam(navalcam)
    put_string navalcam[:name]
    navalcam.text.split.map(&:to_f).each do |v|
      put_flt v
    end
  end

  def put_navalcams(xml)
    put_ary :navalcam, xml.children(:navalcam)
  end

  def put_bobby(bobby)
    put_u4 bobby[:id]
    put_flt bobby[:mass]
    put_flt bobby[:radius]
    put_flt bobby[:x]
    put_flt bobby[:y]
    put_flt bobby[:z]

    breach = bobby.child(:breach)
    put_flt breach[:radius]
    put_flt breach[:x]
    put_flt breach[:y]
    put_flt breach[:z]

    connections = bobby.children(:connection).map{|c| c[:bobby].to_i}
    put_u4 connections.size
    connections.each do |connection|
      put_u4 connection
    end
  end

  def put_buoyancy(buoyancy)
    put_ary :bobby, buoyancy.children(:bobby)
  end

  def put_corner(corner)
    put_flt corner[:x]
    put_flt corner[:y]
    put_flt corner[:z]
    put_u1  corner[:type]
  end

  def put_piece(piece)
    put_u4 piece[:id]
    put_ary :corner, piece.children(:corner)
    something = piece[:something].split
    put_flt something[0]
    put_flt something[1]
    put_flt something[2]
    put_flt something[3]
  end

  def put_deck(deck)
    put_string deck[:id]
    put_u4 deck[:number]
    put_ary :piece, deck.children(:piece)
  end

  def put_decks(decks)
    put_ary :deck, decks.children(:deck)
  end

  def put_pipe(pipe)
    put_u4 pipe[:type]
    put_u4 pipe[:id]
    pipe.children(XML).each do |e|
      if e.name == :i
        put_u4 e.text
      elsif e.name  == :vertex
        put_vertex e
      else
        raise "<pipe> tag parse error"
      end
    end
  end

  def put_pipes(pipes)
    put_ary :pipe, pipes.children(:pipe)
  end

  def put_cannon(cannon)
    put_string cannon[:type]
    put_u4 cannon[:cannon_id]
    put_u4 cannon[:deck_id]
    put_flt cannon[:x1]
    put_flt cannon[:y1]
    put_flt cannon[:z1]
    put_flt cannon[:x2]
    put_flt cannon[:y2]
    put_flt cannon[:z2]
  end

  def put_cannons(cannons)
    put_ary :cannon, cannons.children(:cannon)
  end

  def put_damage_model_part_panel(panel)
    put_ary :vertex, panel.children(:vertex)
  end

  def put_damage_model_part(part)
    put_string part[:name]
    put_ary :string, part.children(:something).map(&:text)
    put_ary :damage_model_part_panel, part.children(:panel)
  end

  def put_damage_model(damage_model)
    put_ary :damage_model_part, damage_model.children(:part)
  end

  def put_collision_face(face)
    put_string face[:name]
    put_u4 face[:index]
    raise unless face.children(:vertex).size == 3
    face.children(:vertex).each do |vertex|
      put_vertex vertex
    end
  end

  def put_collisions(collisions)
    put_ary :collision_face, collisions.children(:face)
  end

  def put_efline(efline)
    put_string efline[:name]
    put_u4 efline[:action]
    put_vertex efline.children(:end)[0]
    put_vertex efline.children(:end)[1]
    put_vertex efline.child(:direction)
  end

  def put_eflines(eflines)
    put_ary :efline, eflines.children(:ef_line)
  end

  def put_custom_position_v1(pos)
    put_string pos[:name]
    put_u4 pos[:a]
    put_vertex pos.child(:position)
  end

  def put_custom_positions_v1(pos)
    put_ary :custom_position_v1, pos.children(:custom_position)
  end

  def put_custom_position_v7(pos)
    put_string pos[:name]
    put_u4 pos[:a]
    put_u4 pos[:b]
    put_vertex pos.children(:position)[0]
    put_vertex pos.children(:position)[1]
  end

  def put_custom_positions_v7(pos)
    put_ary :custom_position_v7, pos.children(:custom_position)
  end

  def put_steam_info_v1(steam_info)
    put_string steam_info[:name]
    put_u4 steam_info[:a]
    put_vertex steam_info.children(:vertex)[0]
    put_vertex steam_info.children(:vertex)[1]
  end

  def put_steam_infos_v1(steam_infos)
    put_ary :steam_info_v1, steam_infos.children(:steam_info)
  end

  def put_steam_info_v7(steam_info)
    put_string steam_info[:name]
    put_u4 steam_info[:a]
    put_string steam_info[:b]
    put_vertex steam_info.children(:vertex)[0]
    put_vertex steam_info.children(:vertex)[1]
  end

  def put_steam_infos_v7(steam_infos)
    put_ary :steam_info_v7, steam_infos.children(:steam_info)
  end

  def put_model_etw(model)
    put_string model[:@name]
    put_string model[:@rigging_path]
    put_string model[:@path]
    put_navalcams model.child(:navalcams)
    put_buoyancy model.child(:buoyancy)
    put_decks model.child(:decks)
    put_pipes model.child(:pipes)
    put_cannons model.child(:cannons)
    put_damage_model model.child(:damage_model)
    put_collisions model.child(:collision)
    put_custom_positions_v1 model.child(:custom_positions)
    put_eflines model.child(:ef_lines)
  end

  def put_model_ntw(model)
    put_string model[:@name]
    put_string model[:@rigging_path]
    put_string model[:@path]
    put_navalcams model.child(:navalcams)
    put_buoyancy model.child(:buoyancy)
    put_decks model.child(:decks)
    put_pipes model.child(:pipes)
    put_cannons model.child(:cannons)
    put_damage_model model.child(:damage_model)
    put_collisions model.child(:collision)
    put_eflines model.child(:ef_lines)
    put_custom_positions_v1 model.child(:custom_positions)
    put_steam_infos_v1 model.child(:steam_infos)
  end

  def put_model_s2tw(model)
    put_string model[:@name]
    put_string model[:@rigging_path]
    put_u1 model[:@zero].to_i
    put_string model[:@path]
    put_navalcams model.child(:navalcams)
    put_buoyancy model.child(:buoyancy)
    put_decks model.child(:decks)
    put_pipes model.child(:pipes)
    put_cannons model.child(:cannons)
    put_damage_model model.child(:damage_model)
    put_collisions model.child(:collision)
    put_eflines model.child(:ef_lines)
    put_custom_positions_v7 model.child(:custom_positions)
    put_steam_infos_v7 model.child(:steam_infos)
  end

  def put_model_r2tw(model)
    put_ascii model[:@name]
    put_ascii model[:@rigging_path]
    destruction_paths = model.child(:destruction_paths).children(:destruction_path).map(&:text)
    put_u1 destruction_paths.size
    destruction_paths.each do |destruction_path|
      put_ascii destruction_path
    end
    put_ascii model[:@path]
    put_ascii model.child(:something)[:a]
    put_ascii model.child(:something)[:b]
    put_ascii model.child(:something)[:c]
    put_ascii model.child(:something)[:d]
    put_navalcams model.child(:navalcams)
    put_buoyancy model.child(:buoyancy)
    put_decks model.child(:decks)
    put_pipes model.child(:pipes)
    put_cannons model.child(:cannons)
    put_damage_model model.child(:damage_model)
    put_collisions model.child(:collision)
    put_eflines model.child(:ef_lines)
    put_custom_positions_v7 model.child(:custom_positions)
    put_steam_infos_v7 model.child(:steam_infos)
  end

  def put_db(xmldir)
    set_mode xmldir
    put_db_header xmldir
    put_u4 xmldir.models.size
    xmldir.models.each do |model|
      send(:"put_model_#{@mode}", model)
    end
  end

  def save!(path)
    open(path, "wb") do |fh|
      fh.print @data
    end
  end
end

class ModelsNavalXmlDir
  attr_reader :empire, :version, :guid, :models

  def initialize(root_path)
    @root_path = Pathname(root_path)
  end

  def parse!
    root_xml = XML.parse((@root_path+"dbtable.xml").open)
    @empire  = (root_xml[:empire] == "true")
    @version = root_xml[:version].to_i
    @guid    = root_xml[:guid]
    @models  = []
    root_xml.each(:xml_include) do |elem|
      @models << XML.parse((@root_path+elem[:path]).open)
    end
  end
end

# Ignore this for compatibility with models_naval_unpack, use flag from the file
if ARGV[0] == "--empire"
  ARGV.shift
end

unless ARGV.size == 2
  STDERR.puts "Usage: #{$0} [--empire] models_naval_dir models_naval_dbtable"
  exit 1
end

xmldir = ModelsNavalXmlDir.new(ARGV[0])
xmldir.parse!

dbtable = ModelsNavalDbTable.new
dbtable.put_db xmldir
dbtable.save!(ARGV[1])
